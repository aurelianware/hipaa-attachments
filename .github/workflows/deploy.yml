name: Deploy

on:
  push:
    branches: ["main", "release/*", "feature/*"]
  workflow_dispatch:

jobs:
  deploy:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment: PROD
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set environment variables
        shell: bash
        run: |
          echo "RG_NAME=${{ vars.AZURE_RG_NAME }}" >> $GITHUB_ENV
          echo "LOCATION=${{ vars.AZURE_LOCATION }}" >> $GITHUB_ENV
          echo "CONNECTOR_LOCATION=${{ vars.AZURE_CONNECTOR_LOCATION }}" >> $GITHUB_ENV
          echo "BASE_NAME=${{ vars.BASE_NAME }}" >> $GITHUB_ENV
          echo "IA_NAME=${{ vars.IA_NAME }}" >> $GITHUB_ENV
          echo "SERVICE_BUS_NAME=${{ vars.SERVICE_BUS_NAME }}" >> $GITHUB_ENV
          echo "STORAGE_SKU=${{ vars.STORAGE_SKU }}" >> $GITHUB_ENV
          echo "LOGIC_APP_NAME=${{ vars.BASE_NAME }}-la" >> $GITHUB_ENV

      - name: Egress / DNS check
        id: egress-check
        run: |
          set -euo pipefail
          echo "=== /etc/resolv.conf ==="
          cat /etc/resolv.conf || true
          echo "=== Resolve downloads.bicep.azure.com ==="
          dig +short downloads.bicep.azure.com || nslookup downloads.bicep.azure.com || host downloads.bicep.azure.com || true
          echo "=== HTTP HEAD to releases/latest ==="
          curl -fsS --max-time 10 -I https://downloads.bicep.azure.com/releases/latest
          echo "=== External IP ==="
          curl -fsS --max-time 10 https://ifconfig.co || curl -fsS --max-time 10 https://ipinfo.io/ip
          echo "=== TCP 443 check ==="
          addr=$(getent hosts downloads.bicep.azure.com | awk '{print $1}' | head -n1)
          if [ -n "$addr" ]; then
            timeout 5 bash -c "</dev/tcp/$addr/443" && echo "TCP 443 OK" || (echo "TCP 443 FAILED" && exit 2)
          else
            echo "Could not resolve address for downloads.bicep.azure.com" && exit 2
          fi

      - name: Install Bicep CLI
        run: az bicep install

      - name: Sanity check who we are
        run: az account show

      # (Optional) one-time provider registration is safe to keep
      - name: Ensure providers registered
        run: |
          az provider register --namespace Microsoft.Web
          az provider register --namespace Microsoft.Logic
          az provider register --namespace Microsoft.Storage
          az provider register --namespace Microsoft.ServiceBus

      - name: Ensure resource group
        run: az group create -n "${{ vars.AZURE_RG_NAME }}" -l "${{ vars.AZURE_LOCATION }}"

      - name: Validate Bicep template
        uses: azure/cli@v2
        with:
          inlineScript: |
            echo "Installing Bicep CLI..."
            az bicep install
            echo "Validating Bicep template: infra/main.bicep"
            az bicep version
            az bicep build --file infra/main.bicep --outfile /tmp/arm.json
            if [ ! -s /tmp/arm.json ]; then
              echo "::error::Bicep compilation failed - ARM template is empty"
              exit 1
            fi
            echo "‚úì Bicep template compiled successfully"

      - name: ARM What-If Analysis
        uses: azure/cli@v2
        with:
          inlineScript: |
            echo "Running ARM What-If analysis"
            az deployment group what-if \
              --resource-group "${{ vars.AZURE_RG_NAME }}" \
              --template-file infra/main.bicep \
              --parameters \
                location="${{ vars.AZURE_LOCATION }}" \
                baseName="${{ vars.BASE_NAME }}" \
                iaName="${{ vars.IA_NAME }}" \
                serviceBusName="${{ vars.SERVICE_BUS_NAME }}" \
                sftpHost="${{ secrets.SFTP_HOST }}" \
                sftpUsername="${{ secrets.SFTP_USERNAME }}" \
                sftpPassword="${{ secrets.SFTP_PASSWORD }}" \
                storageSku="${{ vars.STORAGE_SKU }}" \
                connectorLocation="${{ vars.AZURE_CONNECTOR_LOCATION }}" \
                enableB2B=true \
                useExistingIa=false \
              --no-pretty-print || true

      - name: Deploy Infrastructure
        uses: azure/arm-deploy@v2
        with:
          scope: resourcegroup
          resourceGroupName: ${{ env.RG_NAME }}
          template: infra/main.bicep
          parameters: |
            location="${{ env.LOCATION }}"
            baseName="${{ env.BASE_NAME }}"
            iaName="${{ env.IA_NAME }}"
            serviceBusName="${{ env.SERVICE_BUS_NAME }}"
            sftpHost="${{ secrets.SFTP_HOST }}"
            sftpUsername="${{ secrets.SFTP_USERNAME }}"
            sftpPassword="${{ secrets.SFTP_PASSWORD }}"
            connectorLocation="${{ env.CONNECTOR_LOCATION }}"
            enableB2B=true
            useExistingIa=false
            storageSku="${{ env.STORAGE_SKU }}"
          deploymentName: hipaa-logic-infra-${{ github.run_number }}

      - name: Show failing operation (full)
        if: failure()
        uses: azure/cli@v2
        with:
          inlineScript: |
            DEPLOY_NAME="hipaa-logic-infra-${{ github.run_number }}"
            echo "Listing failed ops..."
            az deployment operation group list \
              --resource-group "$RG_NAME" \
              --name "$DEPLOY_NAME" \
              --query "[?properties.provisioningState=='Failed']" -o jsonc

            echo "Showing full statusMessage for each failed op..."
            for OP in $(az deployment operation group list \
              --resource-group "$RG_NAME" \
              --name "$DEPLOY_NAME" \
              --query "[?properties.provisioningState=='Failed'].name" -o tsv); do
              az deployment operation group show \
                --resource-group "$RG_NAME" \
                --name "$DEPLOY_NAME" \
                --operation-ids "$OP" -o jsonc
            done

      - name: Configure Integration Account (trading partners, schemas, agreements)
        run: pwsh ./scripts/setup-integration-account-complete.ps1 -ResourceGroup "$RG_NAME" -IntegrationAccountName prod-integration-account -Location ${{ vars.AZURE_LOCATION }}

      - name: Package Logic App workflows
        shell: bash
        run: |
          set -euo pipefail
          WF_PATH="logicapps/workflows"
          PARENT_DIR="$(dirname "$WF_PATH")"
          BASE_NAME="$(basename "$WF_PATH")"
          
          echo "Packaging workflows from: $WF_PATH"
          if [ ! -d "$WF_PATH" ]; then
            echo "::error::Workflows path '$WF_PATH' not found"; exit 1
          fi
          
          pushd "$PARENT_DIR" > /dev/null
          zip -r ../workflows.zip "$BASE_NAME"
          popd > /dev/null
          
          echo "Workflow package created: $(pwd)/workflows.zip"
          ls -lh workflows.zip
          echo "Package contents:"
          unzip -l workflows.zip | head -40

      - name: Deploy Logic App workflows
        uses: azure/cli@v2
        with:
          inlineScript: |
            APP_NAME="${{ env.LOGIC_APP_NAME }}"
            RG="${{ vars.AZURE_RG_NAME }}"
            ZIP_PATH="workflows.zip"

            echo "Deploying workflows to Logic App: $APP_NAME"
            if [ ! -f "$ZIP_PATH" ]; then
              echo "::error::Workflow package $ZIP_PATH not found"; exit 1
            fi

            # Deploy the ZIP package
            az webapp deploy \
              --resource-group "$RG" \
              --name "$APP_NAME" \
              --src-path "$ZIP_PATH" \
              --type zip

            echo "‚úì Workflows deployed successfully"

      - name: Restart Logic App
        uses: azure/cli@v2
        with:
          inlineScript: |
            APP_NAME="${{ env.LOGIC_APP_NAME }}"
            RG="${{ vars.AZURE_RG_NAME }}"

            echo "Restarting Logic App: $APP_NAME"
            az webapp restart -g "$RG" -n "$APP_NAME"
            echo "‚úì Logic App restarted"
            echo "üåê https://$APP_NAME.azurewebsites.net"
