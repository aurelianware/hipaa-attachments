name: Deploy Parkland Attachments (Matrix: DEV/UAT/PROD + DEV Lint)

on:
  workflow_dispatch:
    inputs:
      baseName:
        description: 'Base name prefix for resources (env suffix will be appended)'
        required: true
        default: 'pchp-attachments'
      bicepPath:
        description: 'Path to Bicep file'
        required: true
        default: 'infra/main.bicep'
      workflowsPath:
        description: 'Path to Logic App workflows folder (contains subfolders per workflow with workflow.json inside)'
        required: true
        default: 'logicapps/workflows'
      logicAppName:
        description: 'Override Logic App Standard app name (optional). If blank, will be <baseName>-<env>-la'
        required: false
        default: ''

jobs:
  lint-dev:
    runs-on: ubuntu-latest
    environment: DEV
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate workflow folder exists
        run: |
          WF_PATH="${{ github.event.inputs.workflowsPath }}"
          if [ ! -d "$WF_PATH" ]; then
            echo "::error::Workflows path '$WF_PATH' not found"; exit 1
          fi
          find "$WF_PATH" -maxdepth 2 -type f -name "workflow.json" -print

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Lint JSON (structure checks)
        run: |
          set -euo pipefail
          failed=0
          while IFS= read -r -d '' f; do
            echo "Checking $f"
            if ! jq . "$f" >/dev/null 2>&1; then
              echo "::error file=$f::Invalid JSON"
              failed=1
              continue
            fi
            if ! jq -e 'has("definition") and has("kind") and has("parameters")' "$f" >/dev/null; then
              echo "::error file=$f::Missing required keys: definition/kind/parameters"
              failed=1
              continue
            fi
            if ! jq -e '.kind=="Stateful" or .kind=="Stateless"' "$f" >/dev/null; then
              echo "::warning file=$f::kind is not Stateful/Stateless (verify)"
            fi
          done < <(find "${{ github.event.inputs.workflowsPath }}" -type f -name "workflow.json" -print0)
          exit $failed

  deploy:
    runs-on: ubuntu-latest
    needs: lint-dev
    strategy:
      fail-fast: false
      matrix:
        include:
          - env: DEV
            location: eastus
            resourceGroup: pchp-attachments-dev-rg
            baseSuffix: -dev
            subscriptionSecret: AZURE_SUBSCRIPTION_ID_DEV
            clientIdSecret: AZURE_CLIENT_ID_DEV
            tenantIdSecret: AZURE_TENANT_ID_DEV
          - env: UAT
            location: eastus
            resourceGroup: pchp-attachments-uat-rg
            baseSuffix: -uat
            subscriptionSecret: AZURE_SUBSCRIPTION_ID_UAT
            clientIdSecret: AZURE_CLIENT_ID_UAT
            tenantIdSecret: AZURE_TENANT_ID_UAT
          - env: PROD
            location: eastus
            resourceGroup: pchp-attachments-prod-rg
            baseSuffix: -prod
            subscriptionSecret: AZURE_SUBSCRIPTION_ID_PROD
            clientIdSecret: AZURE_CLIENT_ID_PROD
            tenantIdSecret: AZURE_TENANT_ID_PROD
    environment: ${{ matrix.env }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC) - ${{ matrix.env }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[matrix.clientIdSecret] }}
          tenant-id: ${{ secrets[matrix.tenantIdSecret] }}
          subscription-id: ${{ secrets[matrix.subscriptionSecret] }}

      - name: Ensure Resource Group - ${{ matrix.env }}
        uses: azure/cli@v2
        with:
          inlineScript: |
            az group create -n "${{ matrix.resourceGroup }}" -l "${{ matrix.location }}"

      - name: Validate Bicep (build)
        uses: azure/cli@v2
        with:
          inlineScript: |
            az bicep version
            az bicep build --file "${{ github.event.inputs.bicepPath }}" --outfile /tmp/arm.json
            test -s /tmp/arm.json

      - name: ARM What-If - ${{ matrix.env }}
        uses: azure/cli@v2
        with:
          inlineScript: |
            az deployment group what-if               --resource-group "${{ matrix.resourceGroup }}"               --template-file "${{ github.event.inputs.bicepPath }}"               --parameters baseName="${{ github.event.inputs.baseName }}${{ matrix.baseSuffix }}"               --no-pretty-print || true

      - name: Deploy Bicep (infra) - ${{ matrix.env }}
        uses: azure/arm-deploy@v2
        with:
          scope: resourcegroup
          resourceGroupName: ${{ matrix.resourceGroup }}
          template: ${{ github.event.inputs.bicepPath }}
          parameters: baseName=${{ github.event.inputs.baseName }}${{ matrix.baseSuffix }}
          deploymentName: pchp-attachments-infra-${{ matrix.env }}

      - name: Resolve Logic App name
        id: resolvela
        run: |
          if [ -n "${{ github.event.inputs.logicAppName }}" ]; then
            echo "name=${{ github.event.inputs.logicAppName }}" >> $GITHUB_OUTPUT
          else
            echo "name=${{ github.event.inputs.baseName }}${{ matrix.baseSuffix }}-la" >> $GITHUB_OUTPUT
          fi

      - name: Zip Logic App workflows (preserve top-level folder)
        shell: bash
        run: |
          set -euo pipefail
          WF_PATH="${{ github.event.inputs.workflowsPath }}"
          PARENT_DIR="$(dirname "$WF_PATH")"
          BASE_NAME="$(basename "$WF_PATH")"

          if [ ! -d "$WF_PATH" ]; then
            echo "::error::Workflows path '$WF_PATH' not found"; exit 1
          fi

          pushd "$PARENT_DIR" > /dev/null
          zip -r ../workflows.zip "$BASE_NAME"
          popd > /dev/null

          echo "Zip created at $(pwd)/workflows.zip"
          unzip -l workflows.zip | sed -n '1,30p'

      - name: Deploy workflows (ZIP deploy to Logic App Standard) - ${{ matrix.env }}
        uses: azure/cli@v2
        with:
          inlineScript: |
            APP="${{ steps.resolvela.outputs.name }}"
            RG="${{ matrix.resourceGroup }}"
            ZIP_PATH="workflows.zip"
            if [ ! -f "$ZIP_PATH" ]; then
              echo "::error::ZIP $ZIP_PATH not found. Ensure previous step created it."; exit 1
            fi
            az webapp deploy               --resource-group "$RG"               --name "$APP"               --src-path "$ZIP_PATH"               --type zip

      - name: Restart Logic App (optional) - ${{ matrix.env }}
        uses: azure/cli@v2
        with:
          inlineScript: |
            az webapp restart -g "${{ matrix.resourceGroup }}" -n "${{ steps.resolvela.outputs.name }}"
